/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CIAAUART_H
#define _MOCK_CIAAUART_H

#include "ciaaUART.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_ciaaUART_Init(void);
void mock_ciaaUART_Destroy(void);
void mock_ciaaUART_Verify(void);




#define ciaaUARTInit_Ignore() ciaaUARTInit_CMockIgnore()
void ciaaUARTInit_CMockIgnore(void);
#define ciaaUARTInit_Expect() ciaaUARTInit_CMockExpect(__LINE__)
void ciaaUARTInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_ciaaUARTInit_CALLBACK)(int cmock_num_calls);
void ciaaUARTInit_StubWithCallback(CMOCK_ciaaUARTInit_CALLBACK Callback);
#define uartSend_IgnoreAndReturn(cmock_retval) uartSend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uartSend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define uartSend_ExpectAndReturn(nUART, data, datalen, cmock_retval) uartSend_CMockExpectAndReturn(__LINE__, nUART, data, datalen, cmock_retval)
void uartSend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ciaaUART_e nUART, void* data, int datalen, int cmock_to_return);
typedef int (* CMOCK_uartSend_CALLBACK)(ciaaUART_e nUART, void* data, int datalen, int cmock_num_calls);
void uartSend_StubWithCallback(CMOCK_uartSend_CALLBACK Callback);
#define uartRecv_IgnoreAndReturn(cmock_retval) uartRecv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uartRecv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define uartRecv_ExpectAndReturn(nUART, data, datalen, cmock_retval) uartRecv_CMockExpectAndReturn(__LINE__, nUART, data, datalen, cmock_retval)
void uartRecv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, ciaaUART_e nUART, void* data, int datalen, int cmock_to_return);
typedef int (* CMOCK_uartRecv_CALLBACK)(ciaaUART_e nUART, void* data, int datalen, int cmock_num_calls);
void uartRecv_StubWithCallback(CMOCK_uartRecv_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
