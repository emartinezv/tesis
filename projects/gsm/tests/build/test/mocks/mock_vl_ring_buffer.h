/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_VL_RING_BUFFER_H
#define _MOCK_VL_RING_BUFFER_H

#include "vl_ring_buffer.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_vl_ring_buffer_Init(void);
void mock_vl_ring_buffer_Destroy(void);
void mock_vl_ring_buffer_Verify(void);




#define VLRingBuffer_Init_IgnoreAndReturn(cmock_retval) VLRingBuffer_Init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void VLRingBuffer_Init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define VLRingBuffer_Init_ExpectAndReturn(vlrb, RingBuff, buffer, itemSize, count, cmock_retval) VLRingBuffer_Init_CMockExpectAndReturn(__LINE__, vlrb, RingBuff, buffer, itemSize, count, cmock_retval)
void VLRingBuffer_Init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb, RINGBUFF_T* RingBuff, void* buffer, int itemSize, int count, int cmock_to_return);
typedef int (* CMOCK_VLRingBuffer_Init_CALLBACK)(VLRINGBUFF_T* vlrb, RINGBUFF_T* RingBuff, void* buffer, int itemSize, int count, int cmock_num_calls);
void VLRingBuffer_Init_StubWithCallback(CMOCK_VLRingBuffer_Init_CALLBACK Callback);
#define VLRingBuffer_Insert_IgnoreAndReturn(cmock_retval) VLRingBuffer_Insert_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void VLRingBuffer_Insert_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define VLRingBuffer_Insert_ExpectAndReturn(vlrb, data, num, cmock_retval) VLRingBuffer_Insert_CMockExpectAndReturn(__LINE__, vlrb, data, num, cmock_retval)
void VLRingBuffer_Insert_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb, const void* data, uint16_t num, int cmock_to_return);
typedef int (* CMOCK_VLRingBuffer_Insert_CALLBACK)(VLRINGBUFF_T* vlrb, const void* data, uint16_t num, int cmock_num_calls);
void VLRingBuffer_Insert_StubWithCallback(CMOCK_VLRingBuffer_Insert_CALLBACK Callback);
#define VLRingBuffer_Pop_IgnoreAndReturn(cmock_retval) VLRingBuffer_Pop_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void VLRingBuffer_Pop_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define VLRingBuffer_Pop_ExpectAndReturn(vlrb, data, cap, cmock_retval) VLRingBuffer_Pop_CMockExpectAndReturn(__LINE__, vlrb, data, cap, cmock_retval)
void VLRingBuffer_Pop_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb, void* data, uint16_t cap, int cmock_to_return);
typedef int (* CMOCK_VLRingBuffer_Pop_CALLBACK)(VLRINGBUFF_T* vlrb, void* data, uint16_t cap, int cmock_num_calls);
void VLRingBuffer_Pop_StubWithCallback(CMOCK_VLRingBuffer_Pop_CALLBACK Callback);
#define VLRingBuffer_Flush_Ignore() VLRingBuffer_Flush_CMockIgnore()
void VLRingBuffer_Flush_CMockIgnore(void);
#define VLRingBuffer_Flush_Expect(vlrb) VLRingBuffer_Flush_CMockExpect(__LINE__, vlrb)
void VLRingBuffer_Flush_CMockExpect(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb);
typedef void (* CMOCK_VLRingBuffer_Flush_CALLBACK)(VLRINGBUFF_T* vlrb, int cmock_num_calls);
void VLRingBuffer_Flush_StubWithCallback(CMOCK_VLRingBuffer_Flush_CALLBACK Callback);
#define VLRingBuffer_IsEmpty_IgnoreAndReturn(cmock_retval) VLRingBuffer_IsEmpty_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void VLRingBuffer_IsEmpty_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define VLRingBuffer_IsEmpty_ExpectAndReturn(vlrb, cmock_retval) VLRingBuffer_IsEmpty_CMockExpectAndReturn(__LINE__, vlrb, cmock_retval)
void VLRingBuffer_IsEmpty_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb, int cmock_to_return);
typedef int (* CMOCK_VLRingBuffer_IsEmpty_CALLBACK)(VLRINGBUFF_T* vlrb, int cmock_num_calls);
void VLRingBuffer_IsEmpty_StubWithCallback(CMOCK_VLRingBuffer_IsEmpty_CALLBACK Callback);
#define VLRingBuffer_IsFull_IgnoreAndReturn(cmock_retval) VLRingBuffer_IsFull_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void VLRingBuffer_IsFull_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define VLRingBuffer_IsFull_ExpectAndReturn(vlrb, cmock_retval) VLRingBuffer_IsFull_CMockExpectAndReturn(__LINE__, vlrb, cmock_retval)
void VLRingBuffer_IsFull_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb, int cmock_to_return);
typedef int (* CMOCK_VLRingBuffer_IsFull_CALLBACK)(VLRINGBUFF_T* vlrb, int cmock_num_calls);
void VLRingBuffer_IsFull_StubWithCallback(CMOCK_VLRingBuffer_IsFull_CALLBACK Callback);
#define VLRingBuffer_GetFree_IgnoreAndReturn(cmock_retval) VLRingBuffer_GetFree_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void VLRingBuffer_GetFree_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define VLRingBuffer_GetFree_ExpectAndReturn(vlrb, cmock_retval) VLRingBuffer_GetFree_CMockExpectAndReturn(__LINE__, vlrb, cmock_retval)
void VLRingBuffer_GetFree_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb, int cmock_to_return);
typedef int (* CMOCK_VLRingBuffer_GetFree_CALLBACK)(VLRINGBUFF_T* vlrb, int cmock_num_calls);
void VLRingBuffer_GetFree_StubWithCallback(CMOCK_VLRingBuffer_GetFree_CALLBACK Callback);
#define VLRingBuffer_GetCount_IgnoreAndReturn(cmock_retval) VLRingBuffer_GetCount_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void VLRingBuffer_GetCount_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define VLRingBuffer_GetCount_ExpectAndReturn(vlrb, cmock_retval) VLRingBuffer_GetCount_CMockExpectAndReturn(__LINE__, vlrb, cmock_retval)
void VLRingBuffer_GetCount_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, VLRINGBUFF_T* vlrb, int cmock_to_return);
typedef int (* CMOCK_VLRingBuffer_GetCount_CALLBACK)(VLRINGBUFF_T* vlrb, int cmock_num_calls);
void VLRingBuffer_GetCount_StubWithCallback(CMOCK_VLRingBuffer_GetCount_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
