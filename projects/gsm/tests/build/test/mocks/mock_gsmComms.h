/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_GSMCOMMS_H
#define _MOCK_GSMCOMMS_H

#include "gsmComms.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_gsmComms_Init(void);
void mock_gsmComms_Destroy(void);
void mock_gsmComms_Verify(void);




#define gsm232UartRecv_IgnoreAndReturn(cmock_retval) gsm232UartRecv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gsm232UartRecv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define gsm232UartRecv_ExpectAndReturn(buffer, n, cmock_retval) gsm232UartRecv_CMockExpectAndReturn(__LINE__, buffer, n, cmock_retval)
void gsm232UartRecv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* const buffer, int n, int cmock_to_return);
typedef int (* CMOCK_gsm232UartRecv_CALLBACK)(uint8_t* const buffer, int n, int cmock_num_calls);
void gsm232UartRecv_StubWithCallback(CMOCK_gsm232UartRecv_CALLBACK Callback);
#define gsm232UartSend_IgnoreAndReturn(cmock_retval) gsm232UartSend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gsm232UartSend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define gsm232UartSend_ExpectAndReturn(buffer, n, cmock_retval) gsm232UartSend_CMockExpectAndReturn(__LINE__, buffer, n, cmock_retval)
void gsm232UartSend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t const* const buffer, int n, int cmock_to_return);
typedef int (* CMOCK_gsm232UartSend_CALLBACK)(uint8_t const* const buffer, int n, int cmock_num_calls);
void gsm232UartSend_StubWithCallback(CMOCK_gsm232UartSend_CALLBACK Callback);
#define gsmTermUartRecv_IgnoreAndReturn(cmock_retval) gsmTermUartRecv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gsmTermUartRecv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define gsmTermUartRecv_ExpectAndReturn(buffer, n, cmock_retval) gsmTermUartRecv_CMockExpectAndReturn(__LINE__, buffer, n, cmock_retval)
void gsmTermUartRecv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* const buffer, int n, int cmock_to_return);
typedef int (* CMOCK_gsmTermUartRecv_CALLBACK)(uint8_t* const buffer, int n, int cmock_num_calls);
void gsmTermUartRecv_StubWithCallback(CMOCK_gsmTermUartRecv_CALLBACK Callback);
#define gsmTermUartSend_IgnoreAndReturn(cmock_retval) gsmTermUartSend_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void gsmTermUartSend_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define gsmTermUartSend_ExpectAndReturn(buffer, n, cmock_retval) gsmTermUartSend_CMockExpectAndReturn(__LINE__, buffer, n, cmock_retval)
void gsmTermUartSend_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t const* const buffer, int n, int cmock_to_return);
typedef int (* CMOCK_gsmTermUartSend_CALLBACK)(uint8_t const* const buffer, int n, int cmock_num_calls);
void gsmTermUartSend_StubWithCallback(CMOCK_gsmTermUartSend_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
